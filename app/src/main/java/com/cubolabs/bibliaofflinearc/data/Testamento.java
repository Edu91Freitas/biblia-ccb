package com.cubolabs.bibliaofflinearc.data;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TESTAMENTO.
 */
public class Testamento {

    private Long id;
    /** Not-null value. */
    private String nome;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TestamentoDao myDao;

    private List<Livro> livros;

    public Testamento() {
    }

    public Testamento(Long id) {
        this.id = id;
    }

    public Testamento(Long id, String nome) {
        this.id = id;
        this.nome = nome;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTestamentoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNome() {
        return nome;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNome(String nome) {
        this.nome = nome;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Livro> getLivros() {
        if (livros == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LivroDao targetDao = daoSession.getLivroDao();
            List<Livro> livrosNew = targetDao._queryTestamento_Livros(id);
            synchronized (this) {
                if(livros == null) {
                    livros = livrosNew;
                }
            }
        }
        return livros;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLivros() {
        livros = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
