package com.cubolabs.bibliaofflinearc;

import java.util.List;
import com.cubolabs.bibliaofflinearc.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LIVRO.
 */
public class Livro {

    private Long id;
    private short ordem_livro;
    private long id_testamento;
    /** Not-null value. */
    private String nome;
    /** Not-null value. */
    private String abrev;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LivroDao myDao;

    private Testamento testamento;
    private Long testamento__resolvedKey;

    private List<Palavra> palavras;

    public Livro() {
    }

    public Livro(Long id) {
        this.id = id;
    }

    public Livro(Long id, short ordem_livro, long id_testamento, String nome, String abrev) {
        this.id = id;
        this.ordem_livro = ordem_livro;
        this.id_testamento = id_testamento;
        this.nome = nome;
        this.abrev = abrev;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLivroDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public short getOrdem_livro() {
        return ordem_livro;
    }

    public void setOrdem_livro(short ordem_livro) {
        this.ordem_livro = ordem_livro;
    }

    public long getId_testamento() {
        return id_testamento;
    }

    public void setId_testamento(long id_testamento) {
        this.id_testamento = id_testamento;
    }

    /** Not-null value. */
    public String getNome() {
        return nome;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNome(String nome) {
        this.nome = nome;
    }

    /** Not-null value. */
    public String getAbrev() {
        return abrev;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAbrev(String abrev) {
        this.abrev = abrev;
    }

    /** To-one relationship, resolved on first access. */
    public Testamento getTestamento() {
        long __key = this.id_testamento;
        if (testamento__resolvedKey == null || !testamento__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TestamentoDao targetDao = daoSession.getTestamentoDao();
            Testamento testamentoNew = targetDao.load(__key);
            synchronized (this) {
                testamento = testamentoNew;
            	testamento__resolvedKey = __key;
            }
        }
        return testamento;
    }

    public void setTestamento(Testamento testamento) {
        if (testamento == null) {
            throw new DaoException("To-one property 'id_testamento' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.testamento = testamento;
            id_testamento = testamento.getId();
            testamento__resolvedKey = id_testamento;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Palavra> getPalavras() {
        if (palavras == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PalavraDao targetDao = daoSession.getPalavraDao();
            List<Palavra> palavrasNew = targetDao._queryLivro_Palavras(id);
            synchronized (this) {
                if(palavras == null) {
                    palavras = palavrasNew;
                }
            }
        }
        return palavras;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPalavras() {
        palavras = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
